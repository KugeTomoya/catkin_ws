// Generated by gencpp from file opencv_test/image.msg
// DO NOT EDIT!


#ifndef OPENCV_TEST_MESSAGE_IMAGE_H
#define OPENCV_TEST_MESSAGE_IMAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/LaserScan.h>

namespace opencv_test
{
template <class ContainerAllocator>
struct image_
{
  typedef image_<ContainerAllocator> Type;

  image_()
    : frameID(0.0)
    , lrf()  {
    }
  image_(const ContainerAllocator& _alloc)
    : frameID(0.0)
    , lrf(_alloc)  {
  (void)_alloc;
    }



   typedef float _frameID_type;
  _frameID_type frameID;

   typedef  ::sensor_msgs::LaserScan_<ContainerAllocator>  _lrf_type;
  _lrf_type lrf;





  typedef boost::shared_ptr< ::opencv_test::image_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::opencv_test::image_<ContainerAllocator> const> ConstPtr;

}; // struct image_

typedef ::opencv_test::image_<std::allocator<void> > image;

typedef boost::shared_ptr< ::opencv_test::image > imagePtr;
typedef boost::shared_ptr< ::opencv_test::image const> imageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::opencv_test::image_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::opencv_test::image_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace opencv_test

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'opencv_test': ['/home/kuge/catkin_ws/src/opencv_test/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::opencv_test::image_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::opencv_test::image_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_test::image_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::opencv_test::image_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_test::image_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::opencv_test::image_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::opencv_test::image_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7bb801d3f3ec3fd2b42f9ef26745b9e8";
  }

  static const char* value(const ::opencv_test::image_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7bb801d3f3ec3fd2ULL;
  static const uint64_t static_value2 = 0xb42f9ef26745b9e8ULL;
};

template<class ContainerAllocator>
struct DataType< ::opencv_test::image_<ContainerAllocator> >
{
  static const char* value()
  {
    return "opencv_test/image";
  }

  static const char* value(const ::opencv_test::image_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::opencv_test::image_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 frameID\n\
sensor_msgs/LaserScan lrf\n\
\n\
================================================================================\n\
MSG: sensor_msgs/LaserScan\n\
# Single scan from a planar laser range-finder\n\
#\n\
# If you have another ranging device with different behavior (e.g. a sonar\n\
# array), please find or create a different message, since applications\n\
# will make fairly laser-specific assumptions about this data\n\
\n\
Header header            # timestamp in the header is the acquisition time of \n\
                         # the first ray in the scan.\n\
                         #\n\
                         # in frame frame_id, angles are measured around \n\
                         # the positive Z axis (counterclockwise, if Z is up)\n\
                         # with zero angle being forward along the x axis\n\
                         \n\
float32 angle_min        # start angle of the scan [rad]\n\
float32 angle_max        # end angle of the scan [rad]\n\
float32 angle_increment  # angular distance between measurements [rad]\n\
\n\
float32 time_increment   # time between measurements [seconds] - if your scanner\n\
                         # is moving, this will be used in interpolating position\n\
                         # of 3d points\n\
float32 scan_time        # time between scans [seconds]\n\
\n\
float32 range_min        # minimum range value [m]\n\
float32 range_max        # maximum range value [m]\n\
\n\
float32[] ranges         # range data [m] (Note: values < range_min or > range_max should be discarded)\n\
float32[] intensities    # intensity data [device-specific units].  If your\n\
                         # device does not provide intensities, please leave\n\
                         # the array empty.\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::opencv_test::image_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::opencv_test::image_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frameID);
      stream.next(m.lrf);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct image_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::opencv_test::image_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::opencv_test::image_<ContainerAllocator>& v)
  {
    s << indent << "frameID: ";
    Printer<float>::stream(s, indent + "  ", v.frameID);
    s << indent << "lrf: ";
    s << std::endl;
    Printer< ::sensor_msgs::LaserScan_<ContainerAllocator> >::stream(s, indent + "  ", v.lrf);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPENCV_TEST_MESSAGE_IMAGE_H
